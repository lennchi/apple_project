SELECT *
FROM IE_2011_2023
;

SELECT *
FROM SKLIZNE_OU
;

SELECT *
FROM IMPORTS
;

SELECT *
FROM EXPORTS
;


-- Create a clean imports table
CREATE OR REPLACE TABLE IMPORTS AS
SELECT REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, ROUND(NETWGT/1000, 2) AS IMPORTED_TONS
FROM IE_2011_2023
WHERE PARTNERDESC <> 'World' AND FLOWDESC = 'Import' AND CMDDESC ILIKE '%EDIBLE%'
ORDER BY REFPERIODID 
;

-- Create a clean exports table
CREATE OR REPLACE TABLE EXPORTS AS
SELECT REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, ROUND(NETWGT/1000, 2) AS EXPORTED_TONS
FROM IE_2011_2023
WHERE PARTNERDESC <> 'World' AND FLOWDESC = 'Export' AND CMDDESC ILIKE '%EDIBLE%'
ORDER BY REFPERIODID 
;



---------------------------------------
/* CHECKING IMPORT VALUES AFTER 2018 */
---------------------------------------

-- See if there are diffs in altqty vs netwgt
SELECT REFYEAR, PARTNERDESC, NETWGT
FROM IE_2011_2023
-- WHERE ALTQTY <> NETWGT
WHERE CMDDESC = 'Fruit, edible; apples, fresh' AND  ISNETWGTESTIMATED = TRUE AND PARTNERDESC <> 'World'
ORDER BY PARTNERDESC
;


-- Create an imports_alt table with altqty instead of netwgt
CREATE OR REPLACE TABLE IMPORTS_ALT AS
select REFYEAR, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, ROUND(ALTQTY/1000, 2) AS IMPORTED_TONS
from ie_2011_2023
WHERE PARTNERDESC <> 'World' AND FLOWDESC = 'Import' AND CMDDESC ILIKE '%EDIBLE%'
order by REFPERIODID 
;
-- Show total imports by year
SELECT REFYEAR, SUM(IMPORTED_TONS)
FROM IMPORTS
WHERE ISNETWGTESTIMATED = FALSE
GROUP BY REFYEAR 
ORDER BY REFYEAR
;

SELECT REFYEAR, PARTNERDESC, SUM(IMPORTED_TONS)
FROM IMPORTS
GROUP BY REFYEAR, PARTNERDESC
ORDER BY SUM(IMPORTED_TONS) DESC
;

-- Check Poland's avg imports for 2019-2023
SELECT PARTNERDESC, SUM(IMPORTED_TONS)/5
FROM IMPORTS
WHERE PARTNERDESC = 'Poland' AND REFYEAR BETWEEN 2019 AND 2023
GROUP BY PARTNERDESC
;

-- Calc avg harvests for 2019-2023
SELECT *
FROM SKLIZNE_OU
WHERE ROK BETWEEN 2019 AND 2023
;

SELECT 138.4*(1 - 0.78)
;



---------------------------------------------
/* GETTING RID OF PESKY DUPES – 2024-05-27 */
---------------------------------------------

-- Check for dupes in IMPORTS (There are 560, all from 2018 and newer)
SELECT *, COUNT(*) AS CNT
FROM IMPORTS
GROUP BY REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, IMPORTED_TONS
HAVING COUNT(*) > 1
ORDER BY CNT DESC
;

-- Check for dupes in EXPORTS (There are 24, from 2019 and 2022)
SELECT *, COUNT(*) AS CNT
FROM EXPORTS
GROUP BY REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, EXPORTED_TONS
HAVING COUNT(*) > 1
ORDER BY CNT DESC
;


-- ** Which columns in the orginal table are responsible for dupes in IMPORTS? (Elimination method – 2nd partners, refmonth)
SELECT COUNT(*),
REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, NETWGT
FROM IE_2011_2023
-- TYPECODE, FREQCODE, REFPERIODID, REFYEAR, REFMONTH, PERIOD, REPORTERCODE, REPORTERISO, REPORTERDESC, FLOWCODE, FLOWDESC, PARTNERCODE, PARTNERISO, PARTNERDESC, PARTNER2CODE, PARTNER2ISO, PARTNER2DESC, CLASSIFICATIONCODE, CLASSIFICATIONSEARCHCODE, ISORIGINALCLASSIFICATION, CMDCODE, CMDDESC, AGGRLEVEL, ISLEAF, CUSTOMSCODE, CUSTOMSDESC, MOSCODE, MOTCODE, MOTDESC, QTYUNITCODE, QTYUNITABBR, QTY, ISQTYESTIMATED, ALTQTYUNITCODE, ALTQTYUNITABBR, ALTQTY, ISALTQTYESTIMATED, NETWGT, ISNETWGTESTIMATED, GROSSWGT, ISGROSSWGTESTIMATED, CIFVALUE, FOBVALUE, PRIMARYVALUE, LEGACYESTIMATIONFLAG, ISREPORTED, ISAGGREGATE
WHERE 1=1
    AND FLOWDESC = 'Import'
    AND CMDDESC ILIKE '%EDIBLE%'
    AND PARTNERDESC <> 'World'
GROUP BY
REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, NETWGT
HAVING COUNT(*) > 1
ORDER BY COUNT(*) DESC
;


-- How many repetitions of each of the duplicate rows do we have in IMPORTS? (Two of each; 560 dupes total)
SELECT REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, IMPORTED_TONS, COUNT(*) AS CNT
FROM IMPORTS
GROUP BY REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, IMPORTED_TONS
HAVING COUNT(*) > 1
ORDER BY REFYEAR, REFMONTH
;

-- How many repetitions of each of the duplicate rows do we have in EXPORTS? (Two of each; 24 dupes total)
SELECT REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, EXPORTED_TONS, COUNT(*) AS CNT
FROM EXPORTS
GROUP BY REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, EXPORTED_TONS
HAVING COUNT(*) > 1
ORDER BY REFYEAR, REFMONTH
;


-- Create a new IMPORTS table without the dupes
CREATE OR REPLACE TABLE IMPORTS AS
SELECT REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, IMPORTED_TONS
FROM 
    (
    SELECT *, ROW_NUMBER() OVER (PARTITION BY REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, IMPORTED_TONS ORDER BY (SELECT NULL)) AS ROW_RANK
    FROM IMPORTS
    )
WHERE ROW_RANK = 1
;

-- Create a new EXPORTS table without the dupes
CREATE OR REPLACE TABLE EXPORTS AS
SELECT REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, EXPORTED_TONS
FROM 
    (
    SELECT *, ROW_NUMBER() OVER (PARTITION BY REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, EXPORTED_TONS ORDER BY (SELECT NULL)) AS ROW_RANK
    FROM EXPORTS
    )
WHERE ROW_RANK = 1
;




-------------------------------------------------------------------
/* CREATE CLEAN TABLES ON THE FIRST TRY (I HOPE!!!) – 2024-05-28 */
-------------------------------------------------------------------

-- Create IMPORTS without dupes
CREATE OR REPLACE TABLE IMPORTS AS
SELECT REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, IMPORTED_TONS
FROM
    (
    SELECT *,
        ROW_NUMBER() OVER (PARTITION BY REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, IMPORTED_TONS ORDER BY (SELECT NULL)) AS ROW_RANK
    FROM 
        (
        SELECT
            REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, ROUND(NETWGT/1000, 2) AS IMPORTED_TONS
        FROM IE_2011_2023
        WHERE 1=1
            AND PARTNERDESC <> 'World'
            AND FLOWDESC = 'Import'
            AND CMDDESC ILIKE '%EDIBLE%'
        ORDER BY REFPERIODID
        )
    )
WHERE ROW_RANK = 1
;


-- Create EXPORTS without dupes
CREATE OR REPLACE TABLE EXPORTS AS
SELECT REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, EXPORTED_TONS
FROM
    (
    SELECT *, ROW_NUMBER() OVER (PARTITION BY REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, EXPORTED_TONS ORDER BY (SELECT NULL)) AS ROW_RANK
    FROM 
        (
        SELECT REFYEAR, REFMONTH, REPORTERDESC, FLOWDESC, PARTNERDESC, CMDDESC, ROUND(NETWGT/1000, 2) AS EXPORTED_TONS
        FROM IE_2011_2023
        WHERE PARTNERDESC <> 'World' AND FLOWDESC = 'Export' AND CMDDESC ILIKE '%EDIBLE%'
        ORDER BY REFPERIODID
        )
    )
WHERE ROW_RANK = 1
;



---------------
/* EXTRA FUN */
---------------

-- Select top 5 importers
SELECT PARTNERDESC, SUM(IMPORTED_TONS)
FROM IMPORTS
GROUP BY PARTNERDESC 
ORDER BY SUM(IMPORTED_TONS) DESC
;


-- Who imported under 1 ton over the years?
SELECT PARTNERDESC, SUM(IMPORTED_TONS)
FROM IMPORTS
GROUP BY PARTNERDESC
HAVING SUM(IMPORTED_TONS) < 1
ORDER BY SUM(IMPORTED_TONS)
;

-- Norway
SELECT *
FROM IMPORTS
WHERE PARTNERDESC = 'Norway'
;


-------------------------------------------------
/* UPDATE THE MEGATABLE WITH CLEAN IMP/EXP DATA*/
-------------------------------------------------
-- Create aggregated IMPORTS
CREATE OR REPLACE TEMPORARY TABLE TEMP_IMPORTS AS
SELECT REFYEAR, SUM(IMPORTED_TONS) AS IMP_TONS
FROM IMPORTS
GROUP BY REFYEAR
ORDER BY REFYEAR
;

-- Create aggregated EXPORTS
CREATE OR REPLACE TEMPORARY TABLE TEMP_EXPORTS AS
SELECT REFYEAR, SUM(EXPORTED_TONS) AS EXP_TONS
FROM EXPORTS
GROUP BY REFYEAR
ORDER BY REFYEAR
;

-- Convert harvest: change data type to number
CREATE OR REPLACE TEMPORARY TABLE TEMP_HARVEST AS
SELECT CAST(ROKY AS INT) AS YEAR, CAST(JABLKA AS FLOAT)/1000 AS HARVEST_TONS
FROM SKLIZEN_2002_2023_TR
;

-- Add households to harvests
CREATE OR REPLACE TEMPORARY TABLE TEMP_PRIVATE
    (
    YEAR INT,
    HARV_PRIVATE FLOAT
    )
;

INSERT INTO TEMP_PRIVATE (YEAR, HARV_PRIVATE)
VALUES
    (2023, 86060),
    (2022, 92151), 
    (2021, 92404),
    (2020, 94295),
    (2019, 92645),
    (2018, 101903),
    (2017, 101903),
    (2016, NULL),
    (2015, NULL),
    (2014, NULL),
    (2013, NULL),
    (2012, NULL),
    (2011, NULL)  
;

CREATE OR REPLACE TABLE HARVESTS_TOTAL AS
SELECT H.YEAR, HARVEST_TONS AS HARV_ORCH, P.HARV_PRIVATE AS HARV_PRIVATE, P.HARV_PRIVATE/HARVEST_TONS AS PERCENT, HARVEST_TONS+P.HARV_PRIVATE AS HARV_TOTAL
FROM TEMP_HARVEST AS H
LEFT JOIN TEMP_PRIVATE AS P
    ON H.YEAR = P.YEAR
;

SELECT * FROM HARVESTS_TOTAL;

-- Create table with population figures
CREATE OR REPLACE TEMPORARY TABLE TEMP_POP
    (
    YEAR INT,
    POPULATION INT
    )
;

INSERT INTO TEMP_POP (YEAR, POPULATION)
VALUES
    (2023, 10759295),
    (2022, 10759525),
    (2021, 10500850),
    (2020, 10700155),
    (2019, 10669324),
    (2018, 10626430),
    (2017, 10589526),
    (2016, 10565284),
    (2015, 10542942),
    (2014, 10524783),
    (2013, 10510719),
    (2012, 10511065),
    (2011, 10496379)  
;

-- Calc total consumption based on population
-- Pick just year and apple consumption pp
CREATE OR REPLACE TEMPORARY TABLE TEMP_CONSUMPTION_PP AS
SELECT CAST(ROK AS INT) AS YEAR, CAST(JABLKA AS FLOAT) AS CONSUMPTION_PP_KG
FROM SPOTREBA_CR_1948_2022
WHERE ROK >= 2011
;

-- Multiply consumption pp for each year by population
CREATE OR REPLACE TEMPORARY TABLE TEMP_CONSUMPTION AS
SELECT P.YEAR, CONSUMPTION_PP_KG*POPULATION AS CONSUMPTION_KG, CONSUMPTION_PP_KG, POPULATION
FROM TEMP_POP AS P
LEFT JOIN TEMP_CONSUMPTION_PP AS C
ON C.YEAR = P.YEAR
;

CREATE OR REPLACE TABLE IMP_EXP_PROD_CONS AS
SELECT I.REFYEAR, IMP_TONS, EXP_TONS, HARV_ORCH, HARV_PRIVATE, HARV_TOTAL, CONSUMPTION_KG/1000 AS CONSUMPTION_TONS, POPULATION
FROM TEMP_IMPORTS AS I
LEFT JOIN TEMP_EXPORTS AS E
    ON I.REFYEAR = E.REFYEAR
LEFT JOIN HARVESTS_TOTAL AS H
    ON I.REFYEAR = H.YEAR
LEFT JOIN TEMP_CONSUMPTION AS C
    ON I.REFYEAR = C.YEAR
;

SELECT * FROM IMP_EXP_PROD_CONS;




----------------------------
/* CHECKING TABLEAU CALCS */
----------------------------

-- Check avg harvests for last 5 years (91 623 t)
SELECT AVG(HARV_TOTAL)
FROM HARVESTS_TOTAL
WHERE YEAR >= 2019
;

-- Calc the reduction due to the cold spell (only 22% harvests expected)
SELECT AVG(HARV_TOTAL), AVG(HARV_TOTAL)*0.22 AS FROSTY
FROM HARVESTS_TOTAL
WHERE YEAR >= 2019
;

SELECT * FROM EXPORTS;


SELECT PARTNERDESC, SUM(EXPORTED_TONS) AS TONS
FROM EXPORTS
GROUP BY PARTNERDESC
ORDER BY TONS DESC
;

SELECT *
FROM EXPORTS
order by partnerdesc
;

